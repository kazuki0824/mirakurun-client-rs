/*
 * Mirakurun
 *
 * DVR Tuner Server Service for Chinachu Air.
 *
 * The version of the OpenAPI document: 3.9.0-beta.20
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TunerDevice {
    #[serde(rename = "index")]
    pub index: i32,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "types")]
    pub types: Vec<crate::models::ChannelType>,
    #[serde(rename = "command")]
    pub command: String,
    #[serde(rename = "pid")]
    pub pid: i32,
    #[serde(rename = "users")]
    pub users: Vec<crate::models::TunerUser>,
    #[serde(rename = "isAvailable")]
    pub is_available: bool,
    #[serde(rename = "isRemote", skip_serializing_if = "Option::is_none")]
    pub is_remote: Option<bool>,
    #[serde(rename = "isFree")]
    pub is_free: bool,
    #[serde(rename = "isUsing")]
    pub is_using: bool,
    #[serde(rename = "isFault")]
    pub is_fault: bool,
}

impl TunerDevice {
    pub fn new(index: i32, name: String, types: Vec<crate::models::ChannelType>, command: String, pid: i32, users: Vec<crate::models::TunerUser>, is_available: bool, is_free: bool, is_using: bool, is_fault: bool) -> TunerDevice {
        TunerDevice {
            index,
            name,
            types,
            command,
            pid,
            users,
            is_available,
            is_remote: None,
            is_free,
            is_using,
            is_fault,
        }
    }
}


