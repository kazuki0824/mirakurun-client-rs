/*
 * Mirakurun
 *
 * DVR Tuner Server Service for Chinachu Air.
 *
 * The version of the OpenAPI document: 3.9.0-beta.20
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Service {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "serviceId")]
    pub service_id: i32,
    #[serde(rename = "networkId")]
    pub network_id: i32,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "type")]
    pub _type: i32,
    #[serde(rename = "logoId", skip_serializing_if = "Option::is_none")]
    pub logo_id: Option<i32>,
    #[serde(rename = "hasLogoData", skip_serializing_if = "Option::is_none")]
    pub has_logo_data: Option<bool>,
    #[serde(rename = "remoteControlKeyId", skip_serializing_if = "Option::is_none")]
    pub remote_control_key_id: Option<i32>,
    #[serde(rename = "epgReady", skip_serializing_if = "Option::is_none")]
    pub epg_ready: Option<bool>,
    #[serde(rename = "epgUpdatedAt", skip_serializing_if = "Option::is_none")]
    pub epg_updated_at: Option<i32>,
    #[serde(rename = "channel", skip_serializing_if = "Option::is_none")]
    pub channel: Option<Box<crate::models::Channel>>,
}

impl Service {
    pub fn new(id: i32, service_id: i32, network_id: i32, name: String, _type: i32) -> Service {
        Service {
            id,
            service_id,
            network_id,
            name,
            _type,
            logo_id: None,
            has_logo_data: None,
            remote_control_key_id: None,
            epg_ready: None,
            epg_updated_at: None,
            channel: None,
        }
    }
}


